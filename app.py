# app.py - Sistema de Despesas da Sa√∫de

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import bcrypt
import os
from datetime import datetime
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4

st.set_page_config(page_title="Sistema de Despesas - Sa√∫de", layout="wide")

st.markdown("""
    <style>
        html, body, .stApp {
            background-color: #ffffff !important;
            color: #004C98 !important;
        }
        section[data-testid="stSidebar"] {
            background-color: #ffffff;
            border-right: 2px solid #004C98;
        }
    </style>
""", unsafe_allow_html=True)

st.markdown("""
    <div style="display: flex; justify-content: space-between; align-items: center; padding: 0 10px 10px 10px;">
        <div>
            <img src="logo-2025.png" alt="Prefeitura de Barreiras" width="300">
        </div>
        <div style="text-align: right;">
            <h2 style="color: #004C98; margin: 0;">Secretaria Municipal de Sa√∫de</h2>
        </div>
    </div>
    <hr style="margin-top: 10px; border: none; border-top: 2px solid #004C98;">
""", unsafe_allow_html=True)

def registrar_log(usuario, acao):
    agora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log = pd.DataFrame([[usuario, acao, agora]], columns=["usuario", "acao", "datahora"])
    log_file = "log_acesso.csv"
    if os.path.exists(log_file):
        log.to_csv(log_file, mode='a', header=False, index=False)
    else:
        log.to_csv(log_file, index=False)

def check_login():
    try:
        df_usuarios = pd.read_csv("usuarios.csv")
    except:
        st.error("Arquivo de usu√°rios n√£o encontrado.")
        return

    with st.form("login_form"):
        st.markdown("### üîê Login")
        usuario = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")

        if submit:
            user = df_usuarios[df_usuarios['usuario'] == usuario]
            if not user.empty:
                senha_hash = user.iloc[0]['senha']
                if bcrypt.checkpw(senha.encode(), senha_hash.encode()):
                    st.session_state["logado"] = True
                    st.session_state["usuario"] = usuario
                    st.session_state["perfil"] = user.iloc[0]["perfil"]
                    registrar_log(usuario, "login")
                    st.rerun()
                else:
                    st.error("Senha incorreta.")
            else:
                st.error("Usu√°rio n√£o encontrado.")

def gerar_pdf(df, unidade, competencia):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 50, "Relat√≥rio de Despesas por Unidade")
    c.setFont("Helvetica", 12)
    c.drawString(50, height - 70, f"Unidade: {unidade}")
    c.drawString(50, height - 90, f"Compet√™ncia: {competencia}")
    c.setFont("Helvetica", 10)
    y = height - 120
    for i, (col, val) in enumerate(df.items()):
        c.drawString(50, y, f"{col}: R$ {val:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
        y -= 15
        if y < 60:
            c.showPage()
            y = height - 60
    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

def formulario_despesas():
    df_unidades = pd.read_csv("ESTABELECIMENTO DE SAUDE.csv", encoding="latin1")
    df_despesas = pd.read_csv("DESPESA.csv", encoding="latin1")

    st.title("üìã Formul√°rio de Despesas - Sa√∫de Municipal")
    unidade = st.selectbox("Unidade de Sa√∫de:", df_unidades.iloc[:, 0].tolist())
    competencia = st.text_input("Compet√™ncia (MM/AAAA):")
    st.subheader("üí∞ Despesas")

    perfil = st.session_state.get("perfil", "")
    valores = {}

    permissoes_despesas = {
        "admin": "all",
        "gerencia": "all",
        "coordenadores": [
            "Embasa", "Coelba", "Aluguel", "Internet",
            "Manuten√ß√£o preventiva equipamentos m√©dicos",
            "Monitoramento eletr√¥nico (seguran√ßa)", "Sistema administrativo",
            "Medicamentos", "Material m√©dico/hospitalar"
        ],
        "odonto": [
            "Material odontol√≥gico", "Manuten√ß√£o preventiva equipamentos odontol√≥gicos"
        ],
        "al": ["Produtos aliment√≠cios", "Material de Limpeza"],
        "transporte": ["Transporte"],
        "mp": ["Manuten√ß√£o Predial", "Ar Condicionado"],
        "rh": ["Folha de Pagamento"],
        "mi": ["Manuten√ß√£o de Inform√°tica"]
    }

    if perfil in permissoes_despesas:
        if permissoes_despesas[perfil] == "all":
            despesas = df_despesas.iloc[:, 0].tolist()
        else:
            despesas = [d for d in df_despesas.iloc[:, 0] if d in permissoes_despesas[perfil]]
    else:
        despesas = []

    for despesa in despesas:
        valor = st.number_input(f"{despesa} (R$)", min_value=0.0, format="%.2f")
        valores[despesa] = valor

    if st.button("Salvar Dados"):
        dados = {
            "Unidade": unidade,
            "Compet√™ncia": competencia,
            "Usu√°rio": st.session_state.get("usuario", "N/A")
        }
        dados.update(valores)
        df_novo = pd.DataFrame([dados])

        arquivo_saida = "dados_despesas.xlsx"
        if os.path.exists(arquivo_saida):
            df_existente = pd.read_excel(arquivo_saida)
            df_total = pd.concat([df_existente, df_novo], ignore_index=True)
        else:
            df_total = df_novo

        df_total.to_excel(arquivo_saida, index=False)
        st.success("‚úÖ Dados salvos com sucesso!")
        registrar_log(st.session_state["usuario"], "salvou dados")

def gerenciar_usuarios():
    st.title("üë• Gerenciador de Usu√°rios")

    df_usuarios = pd.read_csv("usuarios.csv")
    st.dataframe(df_usuarios)

    st.markdown("### ‚ûï Adicionar Novo Usu√°rio")
    with st.form("form_add_user"):
        novo_usuario = st.text_input("Novo Usu√°rio")
        nova_senha = st.text_input("Senha", type="password")
        novo_perfil = st.selectbox("Perfil", ["admin", "gerencia", "coordenadores", "odonto", "al", "transporte", "mp", "rh", "mi"])
        submit_add = st.form_submit_button("Cadastrar")
        if submit_add:
            hash_senha = bcrypt.hashpw(nova_senha.encode(), bcrypt.gensalt()).decode()
            novo_dado = pd.DataFrame([[novo_usuario, hash_senha, novo_perfil]], columns=["usuario", "senha", "perfil"])
            df_usuarios = pd.concat([df_usuarios, novo_dado], ignore_index=True)
            df_usuarios.to_csv("usuarios.csv", index=False)
            st.success("‚úÖ Usu√°rio cadastrado com sucesso!")

    st.markdown("### üóëÔ∏è Excluir Usu√°rio")
    usuario_excluir = st.selectbox("Selecionar usu√°rio para excluir", df_usuarios["usuario"].tolist())
    if st.button("Excluir"):
        df_usuarios = df_usuarios[df_usuarios["usuario"] != usuario_excluir]
        df_usuarios.to_csv("usuarios.csv", index=False)
        st.success(f"‚úÖ Usu√°rio '{usuario_excluir}' exclu√≠do com sucesso!")

def dashboard():
    st.title("üìä Dashboard de Despesas por Unidade, Compet√™ncia e Tipo")

    try:
        df = pd.read_excel("dados_despesas.xlsx")
    except:
        st.warning("Nenhum dado encontrado ainda.")
        return

    unidades = df["Unidade"].dropna().unique().tolist()
    competencias = df["Compet√™ncia"].dropna().unique().tolist()

    unidade_sel = st.selectbox("Selecionar Unidade", ["Todas"] + unidades)
    competencia_sel = st.selectbox("Selecionar Compet√™ncia", ["Todas"] + competencias)

    df_filtrado = df.copy()
    if unidade_sel != "Todas":
        df_filtrado = df_filtrado[df_filtrado["Unidade"] == unidade_sel]
    if competencia_sel != "Todas":
        df_filtrado = df_filtrado[df_filtrado["Compet√™ncia"] == competencia_sel]

    colunas_despesa = [col for col in df.columns if col not in ["Unidade", "Compet√™ncia", "Usu√°rio"]]
    totais = df_filtrado[colunas_despesa].sum().sort_values(ascending=False)

    st.subheader("üìå Total por Categoria de Despesa")
    fig1, ax1 = plt.subplots()
    totais.plot(kind="barh", ax=ax1, color="#004C98")
    ax1.set_xlabel("Valor total (R$)")
    st.pyplot(fig1)

    st.subheader("üìÜ Evolu√ß√£o por Compet√™ncia")
    if "Compet√™ncia" in df_filtrado.columns:
        df_comp = df_filtrado.groupby("Compet√™ncia")[colunas_despesa].sum()
        fig2, ax2 = plt.subplots(figsize=(10, 5))
        df_comp.plot(ax=ax2)
        ax2.set_ylabel("Valor (R$)")
        ax2.legend(loc="center left", bbox_to_anchor=(1, 0.5))
        st.pyplot(fig2)

    st.subheader("üìé Composi√ß√£o Percentual")
    fig3, ax3 = plt.subplots()
    totais.plot(kind="pie", ax=ax3, autopct="%1.1f%%", startangle=90)
    ax3.set_ylabel("")
    ax3.set_title("Distribui√ß√£o das Despesas")
    st.pyplot(fig3)

    st.subheader("üì§ Exportar Relat√≥rio")
    col1, col2 = st.columns(2)
    with col1:
        excel = df_filtrado.to_excel(index=False, engine="openpyxl")
        st.download_button("üì• Baixar Excel", data=excel, file_name="despesas_filtradas.xlsx")

    with col2:
        pdf_buffer = gerar_pdf(totais, unidade_sel, competencia_sel)
        st.download_button("üìÑ Gerar PDF", data=pdf_buffer, file_name="relatorio_despesas.pdf")

    st.subheader("üìä Comparativo de Despesas por Ano")
    df["Ano"] = df["Compet√™ncia"].str[-4:]
    anos_disponiveis = sorted(df["Ano"].dropna().unique().tolist())

    col1, col2 = st.columns(2)
    with col1:
        ano1 = st.selectbox("Selecionar Ano 1", anos_disponiveis, key="ano1")
    with col2:
        ano2 = st.selectbox("Selecionar Ano 2", anos_disponiveis, index=1 if len(anos_disponiveis) > 1 else 0, key="ano2")

    if ano1 != ano2:
        df_ano1 = df[df["Ano"] == ano1]
        df_ano2 = df[df["Ano"] == ano2]

        soma1 = df_ano1[colunas_despesa].sum()
        soma2 = df_ano2[colunas_despesa].sum()

        df_comparativo = pd.DataFrame({
            ano1: soma1,
            ano2: soma2
        })

        st.markdown("#### üíπ Comparativo Total por Categoria")
        fig4, ax4 = plt.subplots(figsize=(10, 5))
        df_comparativo.plot(kind="bar", ax=ax4)
        ax4.set_ylabel("Valor (R$)")
        ax4.set_title("Totais por Tipo de Despesa")
        st.pyplot(fig4)

        st.markdown("#### üìà Evolu√ß√£o Mensal Comparativa")
        df["M√™s"] = df["Compet√™ncia"].str[:2]
        df["Ano-M√™s"] = df["Ano"] + "-" + df["M√™s"]

        df_mensal = df.groupby(["Ano", "M√™s"])[colunas_despesa].sum().reset_index()
        df_mensal["Ano-M√™s"] = df_mensal["Ano"] + "-" + df_mensal["M√™s"]

        fig5, ax5 = plt.subplots(figsize=(10, 5))
        for col in colunas_despesa:
            dados1 = df_mensal[df_mensal["Ano"] == ano1].set_index("Ano-M√™s")[col]
            dados2 = df_mensal[df_mensal["Ano"] == ano2].set_index("Ano-M√™s")[col]
            dados1.plot(ax=ax5, label=f"{col} ({ano1})", linestyle="--")
            dados2.plot(ax=ax5, label=f"{col} ({ano2})")
        ax5.set_ylabel("Valor (R$)")
        ax5.set_title("Evolu√ß√£o Mensal das Despesas")
        ax5.legend(loc="upper left", bbox_to_anchor=(1, 1))
        st.pyplot(fig5)
    else:
        st.info("Selecione dois anos diferentes para comparar.")
        
if "logado" not in st.session_state:
    st.session_state["logado"] = False
if "logado" not in st.session_state:
    st.session_state["logado"] = False

if not st.session_state["logado"]:
    st.subheader("üîê Login")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        st.session_state["logado"] = True
        st.session_state["usuario"] = usuario
        st.session_state["perfil"] = "admin"  # Exemplo
        st.rerun()
else:
    st.sidebar.markdown(f"üßç‚Äç‚ôÇÔ∏è Usu√°rio: `{st.session_state['usuario']}`")
    st.sidebar.markdown(f"üîê Perfil: `{st.session_state['perfil']}`")
   
    perfil = st.session_state["perfil"]
    if perfil in ["admin", "gerencia"]:
        aba = st.sidebar.radio("Menu", ["Formul√°rio", "Dashboard", "Gerenciar Usu√°rios"])
    else:
        aba = "Formul√°rio"

    if st.sidebar.button("üö™ Sair"):
        registrar_log(st.session_state["usuario"], "logout")
        st.session_state.clear()
        st.experimental_rerun()

    if aba == "Formul√°rio":
        formulario_despesas()
    elif aba == "Dashboard":
        dashboard()
    elif aba == "Gerenciar Usu√°rios" and perfil == "admin":
        gerenciar_usuarios()
      
def gerenciar_usuarios():
    st.title("üë• Gerenciador de Usu√°rios")

    df_usuarios = pd.read_csv("usuarios.csv")
    st.dataframe(df_usuarios)

    st.markdown("### ‚ûï Adicionar Novo Usu√°rio")
    with st.form("form_add_user"):
        novo_usuario = st.text_input("Novo Usu√°rio")
        nova_senha = st.text_input("Senha", type="password")
        novo_perfil = st.selectbox("Perfil", ["admin", "gerencia", "coordenadores", "odonto", "al", "transporte", "mp", "rh", "mi"])
        submit_add = st.form_submit_button("Cadastrar")
        if submit_add:
            hash_senha = bcrypt.hashpw(nova_senha.encode(), bcrypt.gensalt()).decode()
            novo_dado = pd.DataFrame([[novo_usuario, hash_senha, novo_perfil]], columns=["usuario", "senha", "perfil"])
            df_usuarios = pd.concat([df_usuarios, novo_dado], ignore_index=True)
            df_usuarios.to_csv("usuarios.csv", index=False)
            st.success("‚úÖ Usu√°rio cadastrado com sucesso!")

    st.markdown("### üóëÔ∏è Excluir Usu√°rio")
    usuario_excluir = st.selectbox("Selecionar usu√°rio para excluir", df_usuarios["usuario"].tolist())
    if st.button("Excluir"):
        df_usuarios = df_usuarios[df_usuarios["usuario"] != usuario_excluir]
        df_usuarios.to_csv("usuarios.csv", index=False)
        st.success(f"‚úÖ Usu√°rio '{usuario_excluir}' exclu√≠do com sucesso!")
